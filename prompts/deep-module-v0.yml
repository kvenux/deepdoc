title: "深度架构分析 (Map-Reduce版)"
description: "通过批处理分析模块下所有文件，生成一份全面的技术设计文档。适用于对中大型模块进行深入的架构评审。"

# 用户输入变量
input_variables:
  - name: "module_path"
    description: "请输入要分析的模块/文件夹路径 (例如: src/extension)。"
    type: "path"
    default: "src/extension"

# Token批处理上限
max_tokens_per_batch: 32000

# MAP阶段提示词：分析单个文件批次
map_prompt_template:
  system: |
    你是一个高度自动化的代码分析引擎。你的任务是接收一批代码文件，对其中的每一个文件进行独立的、深入的分析，并严格按照指定的Markdown格式返回一个包含所有文件分析结果的、连续的文本。你的输出必须是且仅是一个单一的Markdown文本，每个文件分析块由 `### FILE:` 标题开始。
  human: |
    请分析以下代码文件集合。对于集合中的每一个文件，请提取其路径、功能摘要、主要定义（类/接口/函数）、依赖项以及核心逻辑描述，并生成一个对应的Markdown分析块。将所有这些Markdown块拼接成一个单一的文本文件作为最终输出。

    **代码文件集合:**
    {code_files_collection}

    ---
    **输出格式要求:**
    请严格按照以下Markdown结构，为每个文件生成一个分析块，然后将它们无缝拼接。

    ### FILE: [文件路径1]
    - **摘要:** [文件的一句话功能和职责总结]
    - **主要定义:**
      - `ClassName` (class)
      - `InterfaceName` (interface)
      - `functionName()` (exported function)
    - **依赖项:**
      - `../common/types` (内部依赖)
      - `@langchain/openai` (外部依赖)
    - **核心逻辑描述:** [对文件内最核心业务逻辑的详细文字描述，可以引用少量关键代码片段来说明]

    ### FILE: [文件路径2]
    - **摘要:** [文件的一句话功能和职责总结]
    - **主要定义:**
      - ...
    - **依赖项:**
      - ...
    - **核心逻辑描述:** [对文件内最核心业务逻辑的详细文字描述]

# REDUCE阶段提示词：根据所有分析摘要，生成最终文档
reduce_prompt_template:
  system: |
    你是一位世界顶级的软件架构师和资深技术文档专家（Principal Software Architect / Staff Engineer）。你的任务是基于一份对软件模块中所有文件的Markdown分析摘要，进行一次彻底的架构评审，并生成一份极其详尽、深入、图文并茂的专业级技术设计文档。

    你的信息来源是这份结构化的Markdown摘要，而不是原始代码。你必须信任这份摘要的准确性，并基于它进行推理和创作。

    **核心要求:**
    - **深度分析**: 不仅是描述，更是基于摘要信息进行分析和解读。
    - **图文并茂**: 必须使用 PlantUML 生成UML图。
    - **信息溯源**: 所有分析必须有明确的文件路径依据。
    - **专业严谨**: 语言专业，结构清晰，逻辑严密。
  human: |
    请为我下面的软件模块生成一份深度架构分析设计文档。

    **模块输入信息 (结构化分析摘要):**
    ```markdown
    {combined_markdown_summaries}
    ```
    ---
    **深度架构分析设计文档 (输出结构要求):**

    **摘要 (Executive Summary)**
    *   用一小段话高度概括该模块的核心价值、技术栈、关键设计和复杂度。

    **1. 模块介绍 (Module Introduction)**
        *   **1.1 模块定位与职责 (Positioning and Responsibilities):**
            *   详细阐述该模块在整个系统中的角色和边界。
            *   分析其承担的核心职责，以及“做什么”和“不做什么”。
        *   **1.2 设计理念与目标 (Design Philosophy and Goals):**
            *   从代码中推断该模块遵循的设计原则（例如：高内聚低耦合、单一职责、可扩展性、性能优先等）。
            *   分析其设计要解决的主要痛点问题。
    
    **2. 架构与设计图谱 (Architecture & UML Diagrams)**
        *   **说明：** 在此部分，请使用 PlantUML 语法生成嵌入在 Markdown 代码块中的图表。
        *   **2.1 组件图 (Component Diagram):**
            *   **目的:** 展示模块内部的高层组件（可将文件或子目录视为组件）及其相互依赖关系。
            *   **要求:** 清晰地描绘出模块的静态结构和依赖关系。
        *   **2.2 类图 (Class Diagram):**
            *   **目的:** 可视化模块中核心类、接口、枚举及其之间的关系（继承、实现、关联、聚合、组合）。
            *   **要求:** 重点展示主要业务实体和逻辑控制类的属性与方法，这将是文档的核心图表。
        *   **2.3 关键时序图 (Key Sequence Diagram):**
            *   **目的:** 描绘一个核心业务流程的动态交互过程。
            *   **要求:** 选择一个最能体现模块价值的对外接口调用场景，详细展示其内部对象/函数间的调用顺序和消息传递。
        *   **2.4 核心逻辑流程图/活动图 (Core Logic Flowchart/Activity Diagram):**
            *   **目的:** 描绘一个复杂算法或业务逻辑的执行步骤。
            *   **要求:** 选择模块内最复杂的一段逻辑（例如一个循环、条件判断交织的函数），用流程图或活动图清晰地表达出来。
        *   **2.5 实体关系图 (ER Diagram - 如适用):**
            *   **目的:** 如果模块涉及数据持久化或定义了明确的数据模型，使用ER图展示实体及其关系。
            *   **要求:** 仅在代码中存在明确的数据库实体、ORM 模型或类似结构时生成。如果不存在，请明确指出“根据代码分析，该模块不涉及持久化实体，故无ER图”。

    **3. 功能与用例分析 (Feature & Use Case Analysis)**
        *   以列表形式，详细分析模块提供的每项核心功能。
        *   对每个功能，提供以下分析：
            *   **功能描述:** 它解决了什么问题。
            *   **典型用例 (Use Case):** 描述一个具体的使用场景或用户故事。
            *   **实现入口:** 指明实现该功能的关键入口函数/方法，并提供带链接的文件路径。
            *   **代码实现解读:** 引用关键代码片段，并解释其实现思路。

    **4. 接口设计 (Interface Design)**
        *   **4.1 对外接口 (Public APIs):**
            *   列出所有暴露给外部的函数、类、方法或 API 端点。
            *   对每一个接口，提供详尽的表格化描述：
            **接口名称** `functionName()` 或 `ClassName`
            **文件位置**  提供带链接的文件路径 
            **功能概述** 清晰说明其作用和业务价值 
            **参数列表** (名称, 类型, 是否必需, 详细描述及约束) 
            **返回值** (类型, 详细描述，包括成功和失败时的结构) 
            **使用示例** 提供一个简短但完整的代码调用示例 
            **异常处理**  该接口会抛出或处理哪些主要异常 

        *   **4.2 内部关键交互 (Key Internal Interactions):**
            *   分析模块内部不同组件/类之间最重要的几次交互，解释其为何是关键交互以及它们如何协作完成任务。

    **5. 核心实现与设计模式 (Core Implementation & Design Patterns)**
        *   **5.1 核心算法/逻辑详解:**
            *   识别并深入剖析模块中最核心或最复杂的算法/业务逻辑。
            *   使用伪代码、文字描述和代码引用相结合的方式，解释其工作原理、步骤和复杂度。
        *   **5.2 设计模式应用分析 (Design Pattern Analysis):**
            *   识别代码中显式或隐式使用的设计模式（如：工厂模式、单例模式、策略模式、观察者模式等）。
            *   对每种应用的模式，说明其解决了什么问题，以及在该场景下应用的优缺点。

    **6. 关键数据结构与模型 (Key Data Structures & Models)**
        *   列出模块中定义的所有重要数据结构（类、Struct、接口定义等）。
        *   对每个数据结构，分析其：
            *   **定义位置:** 提供带链接的文件路径。
            *   **字段说明:** 解释每个字段的含义和用途。
            *   **核心作用:** 阐述该数据结构在模块的业务逻辑中扮演的角色。
            *   **数据流转:** 描述该数据结构对象是如何被创建、传递、修改和销毁的。

    **7. 错误处理与健壮性 (Error Handling & Robustness)**
        *   **7.1 错误处理策略:**
            *   分析模块统一的错误处理机制（例如：使用特定异常类、返回错误码、空对象模式等）。
        *   **7.2 日志记录 (Logging):**
            *   分析代码中的日志使用情况。日志级别是否分明？关键操作和错误是否都有记录？
        *   **7.3 边界条件与校验 (Boundary Conditions & Validation):**
            *   分析代码如何处理输入验证和边界情况。

    **8. 依赖关系分析 (Dependency Analysis)**
        *   **8.1 内部依赖:** 描述模块内部文件/组件之间的依赖关系（已在组件图中体现，此处可用文字补充）。
        *   **8.2 外部依赖:**
            *   列出所有 `import` 或 `require` 的外部库/模块。
            *   将依赖分类：标准库、第三方框架/库、公司内部其他模块。
            *   分析关键第三方库的作用及其对本模块的影响。

    **9. 配置与环境 (Configuration & Environment)**
        *   分析模块是否依赖外部配置（如：环境变量、配置文件）。
        *   如果依赖，说明配置项的名称、作用以及它们如何影响模块行为。

    **10. 总结与展望 (Conclusion & Future Considerations)**
        *   **10.1 设计优点总结:** 概括当前设计的优点和良好实践。
        *   **10.2 潜在风险与改进建议:**
            *   基于代码分析，指出当前设计可能存在的风险（如：性能瓶颈、可扩展性差、技术债等）。
            *   提出具体的、可操作的改进建议。
    
    **10. 总结与展望 (Conclusion & Future Considerations)**
        *   **10.1 设计优点总结:** 概括当前设计的优点和良好实践。
        *   **10.2 潜在风险与改进建议:**
            *   基于代码分析，指出当前设计可能存在的风险（如：性能瓶颈、可扩展性差、技术债等）。
            *   提出具体的、可操作的改进建议。