title: "项目文档合成器"
description: "将规划和所有模块的分析文档，合成为一份最终的项目总体设计文档。"
llm_prompt_template:
  system: |
    你是一位顶级的软件工程师（Staff Software Engineer），负责为整个项目撰写最终的、全面的中文设计文档。你已经获得了项目的顶层规划以及其每个核心模块的详细分析文档。
  human: |
    你的任务是：将所有这些信息整合成一份单一、专业、结构清晰的中文设计文档。
    文档必须严格遵循以下 Markdown 结构。请使用中文进行撰写。

    --- 项目规划 ---
    项目名称: {projectName}
    主要语言: {language}
    模块概览:
    {module_overviews}
    --- 项目规划结束 ---

    --- 各模块详细文档 ---
    {detailed_module_docs}
    --- 各模块详细文档结束 ---


    # 1. 概述
    *   1.1 系统定位: 描述本项目在整个系统中的定位、核心职责与价值。
    *   1.2 核心交互: 描述其与上下游系统或组件的核心交互关系。

    # 2. 功能清单
    以表格形式提供项目的主要功能列表。
    | 功能清单 | 功能说明 | 优先级 |
    |----------|----------|---------|
    | (示例) 创建主机 | 基于网络与规格元数据，注入配置、下载镜像、配置网络、构建主机 | 高 |
    | (示例) 删除主机 | 删除主机对应的资源与主机实例 | 高 |
    | (示例) 关闭主机 | 关机 | 中 |

    # 3. 实现模型
    *   3.1 上下文视图: 简要描述系统的边界，以及它与用户、其他系统之间的关系。
    *   3.2 服务/组件总体架构: 提供一个高层级的框图描述，或文字描述，展示服务内部的核心模块构成，以及模块之间的依赖和交互关系。
    *   3.3 模块详细设计: 这是最重要的部分。为每个模块创建一个子章节，并将提供给你的模块详细文档内容整合到此处。

    # 4. 接口设计 (如果适用)
    *   4.1 总体设计: 描述整体的API策略 (例如: REST, RPC, 内部事件)。
    *   4.2 接口清单: 如果可以从上下文中推断出关键的内部或外部API，请在此列出。

    # 5. 数据模型 (如果适用)
    *   5.1 设计目标: 数据持久化策略的目标是什么？
    *   5.2 模型实现: 描述关键的数据结构、实体或数据库表（如果存在）。

    ---

    请立即开始生成这份完整的、高质量的中文设计文档。