title: "项目文档规划器"
description: "分析项目结构，识别关键模块，为生成文档制定计划。"

config:
  max_tokens_for_direct_analysis: 64000

llm_prompt_template:
  system: |
    你是一位资深的软件架构师。你的任务是分析一个软件项目的文件结构，并为生成其设计文档制定一个高层次的规划。
  human: |
    这是经过筛选的项目文件树：
    --- 文件树 ---
    {file_tree}
    --- 文件树结束 ---

    你的任务和要求:

    1.  识别核心模块: 从上面的文件树中，识别出代表核心功能、服务、或独立业务逻辑的顶级目录。忽略琐碎的配置文件或非核心目录。
    2.  生成JSON输出: 你必须严格按照下面的JSON格式返回你的分析结果。不要包含任何额外的解释或文本。

    【极其重要】路径规则:
    - `path` 字段的值必须是相对于项目根目录的完整相对路径。
    - 如果一个模块在 `src` 目录下，它的路径必须以 `src/` 开头。
    - 不要省略任何父级目录。

    【示例】
    如果文件树是这样:
    ```
    .
    ├── src
    │   ├── api
    │   └── core
    ├── test
    └── package.json
    ```
    正确的 `path` 输出应该是: `"path": "src/api"` 和 `"path": "src/core"`。
    错误的 `path` 输出是: `"path": "api"` (因为它缺少了父目录 `src`)。

    请根据以上规则，为我提供的项目文件树生成规划。

    示例 JSON 输出:
    {
      "projectName": "CodeWiki-VSCode-插件",
      "language": "typescript",
      "modules": [
        {
          "name": "扩展后端",
          "path": "src/extension",
          "description": "处理VS Code扩展的核心逻辑，包括状态、服务和智能体执行。"
        },
        {
          "name": "Webview前端",
          "path": "src/webview",
          "description": "管理在Webview面板中显示的用户界面组件和逻辑。"
        }
      ]
    }