================================================================================
项目结构 (基于过滤规则):
prompts
├── module_analysis_direct.yml
├── module_analysis_mapreduce.yml
├── project_planner.yml
└── project_synthesis.yml
================================================================================

--- file_path: module_analysis_direct.yml ---
title: "生成设计文档 (软件实现版)"
description: "通过读取一个模块下所有文件的完整内容，生成一份包含UML图谱、深度代码分析和设计决策的、全面的技术设计文档。适用于对小型模块进行深入的架构评审和文档沉淀。"

# 声明此 prompt 需要的用户输入
input_variables:
  - name: "module_path"
    description: "请输入要分析的模块/文件夹路径 (例如: src/common)。"
    type: "path"
    default: "src/common"
  - name: "language"
    description: "项目的编程语言（用于工具过滤）"
    type: "text"
    default: "typescript"

# 工具链：获取目录结构和所有文件内容
tool_chain:
  - tool: "get_directory_tree"
    input:
      path: "{module_path}"
      language: "{language}"
    output_variable: "directory_tree"
  - tool: "get_all_files_content"
    input:
      path: "{module_path}"
      language: "{language}"
    output_variable: "all_files_content"

# LLM 的最终任务：根据提供的所有文件内容撰写深度架构文档
llm_prompt_template:
  system: |
    你是一位世界顶级的软件架构师和资深技术文档专家（Principal Software Architect / Staff Engineer）。你的任务是基于一个软件模块的完整代码，进行一次彻底的架构评审，并生成一份极其详尽、深入、图文并茂的专业级中文技术设计文档。

    你的分析不应停留在代码表面，而是要洞察其背后的设计思想、架构模式、权衡取舍和潜在风险。你必须严格按照用户要求的结构和格式进行输出，并熟练运用 PlantUML 生成多种 UML 图来可视化你的分析。

    核心要求：
    - 篇幅控制：不得超出10000字
    - 深度分析: 不仅是描述，更是分析和解读。
    - 图文并茂: 必须使用 PlantUML 生成UML图。
    - 代码溯源: 所有分析必须有明确的代码依据。
    - 专业严谨: 语言专业，结构清晰，逻辑严密。
    - 全程中文: 所有输出内容必须是中文。

  human: |
    请为我下面的软件模块生成一份软件实现设计文档。所有内容请使用中文撰写。

    模块输入信息：
    1.  模块路径： `{module_path}`
    2.  模块目录结构：
        ```
        {directory_tree}
        ```
    3.  模块内所有文件的代码内容：
        ```
        {all_files_content}
        ```
    ---
    软件实现设计文档 (输出结构要求):

    # XX模块实现设计文档
    题目里为模块起个名字，尽量用路径里的英文名，替换上面的XX

     1.  模块介绍
        *   描述该模块的用途。
        *   说明模块在整个系统中的定位。
        *   阐述模块的主要职责。
        *   补充模块路径{module_path}

    2.  功能描述 
        *   详细列出并逐一描述该模块提供的各项核心功能，以 Markdown 列表形式输出。
        *   针对每个核心功能，请明确指出实现该功能的关键代码片段所在的位置。

    3.  模块的文件夹详细结构及功能介绍：
        *   详细列出所有文件夹的树形结构
        *   在每个树形结构上对文件的功能进行描述；对于文件夹要总结文件夹内部文件功能，对文件夹的功能进行描述
        *   用合适的缩进或者项目符号来表示文件夹结构的层次

    
    4. 架构与设计图谱
        *   说明： 在此部分，请使用 PlantUML 语法生成嵌入在 Markdown 代码块中的图表。
        *   每个图要提供详细的文字补充说明，不能一句话带过
        *   2.1 类图 (Class Diagram):
            *   目的: 可视化模块中核心类、接口、枚举及其之间的关系（继承、实现、关联、聚合、组合）。
            *   要求: 重点展示主要业务实体和逻辑控制类的属性与方法，这将是文档的核心图表。
            *   补充描述：分析它们之间的关系如何体现了如“单一职责”、“开闭原则”等设计原则。
        *   2.2 关键时序图 (Key Sequence Diagram):
            *   目的: 描绘一个核心业务流程的动态交互过程。
            *   要求: 选择一个最能体现模块价值的对外接口调用场景，详细展示其内部对象/函数间的调用顺序和消息传递。
            *   补充描述：在分析中，解读出其交互模式（如同步/异步）、职责划分和性能考量。
        *   2.3 核心逻辑流程图/活动图 (Core Logic Flowchart/Activity Diagram):
            *   目的: 描绘一个复杂算法或业务逻辑的执行步骤。
            *   要求: 选择模块内最复杂的一段逻辑（例如一个循环、条件判断交织的函数），用流程图或活动图清晰地表达出来。
            *   补充描述：描述整体流程图，分析其健壮性和效率。
        *   2.4 实体关系图 (ER Diagram - 如适用):
            *   目的: 如果模块涉及数据持久化或定义了明确的数据模型，使用ER图展示实体及其关系。
            *   要求: 仅在代码中存在明确的数据库实体、ORM 模型或类似结构时生成。如果不存在，请明确指出“根据代码分析，该模块不涉及持久化实体，故无ER图”。
            *   补充描述：分析数据库的设计考量，包括分层描述等

    5. 功能与用例分析 
        *   以列表形式，详细分析模块提供的每项核心功能。
        *   对每个功能，提供以下分析：
            *   功能描述: 它解决了什么问题。
            *   典型用例 (Use Case): 描述一个具体的使用场景或用户故事。
            *   实现入口: 指明实现该功能的关键入口函数/方法，并提供带链接的文件路径。

    6. 接口设计
        *   4.1 对外接口 (Public APIs):
            *   列出所有暴露给外部的函数、类、方法或 API 端点。
            *   对每一个接口，提供详尽的表格化描述：
            接口名称 `functionName()` 或 `ClassName`
            文件位置  提供带链接的文件路径 
            功能概述 清晰说明其作用和业务价值 
            参数列表 (名称, 类型, 是否必需, 详细描述及约束) 
            返回值 (类型, 详细描述，包括成功和失败时的结构) 
            异常处理  该接口会抛出或处理哪些主要异常 

        *   4.2 内部关键交互 (Key Internal Interactions):
            *   分析模块内部不同组件/类之间最重要的几次交互，解释其为何是关键交互以及它们如何协作完成任务。

    7. 核心实现与设计模式
        *   5.1 核心算法/逻辑详解:
            *   识别并深入剖析模块中最核心或最复杂的算法/业务逻辑。
            *   使用伪代码、文字描述和代码引用相结合的方式，解释其工作原理、步骤和复杂度。
        *   5.2 设计模式应用分析 (Design Pattern Analysis):
            *   识别代码中显式或隐式使用的设计模式（如：工厂模式、单例模式、策略模式、观察者模式等）。
            *   对每种应用的模式，说明其解决了什么问题，以及在该场景下应用的优缺点。

    8. 关键数据结构与模型
        *   列出模块中定义的所有重要数据结构（类、Struct、接口定义等）。
        *   对每个数据结构，分析其：
            *   定义位置: 提供带链接的文件路径。
            *   字段说明: 解释每个字段的含义和用途。
            *   核心作用: 阐述该数据结构在模块的业务逻辑中扮演的角色。
            *   数据流转: 描述该数据结构对象是如何被创建、传递、修改和销毁的。

    9. 错误处理与健壮性 
        *   9.1 错误处理策略:
            *   分析模块统一的错误处理机制（例如：使用特定异常类、返回错误码、空对象模式等）。
        *   9.2 日志记录 (Logging):
            *   分析代码中的日志使用情况。日志级别是否分明？关键操作和错误是否都有记录？
        *   9.3 边界条件与校验 (Boundary Conditions & Validation):
            *   分析代码如何处理输入验证和边界情况。

    10. 依赖关系分析
        *   8.1 内部依赖: 描述模块内部文件/组件之间的依赖关系（已在组件图中体现，此处可用文字补充）。
        *   8.2 外部依赖:
            *   列出所有 `import` 或 `require` 的外部库/模块。
            *   将依赖分类：标准库、第三方框架/库、公司内部其他模块。
            *   分析关键第三方库的作用及其对本模块的影响。


    通用生成准则 (General Generation Guidelines):
    *   准确性优先： 所有信息必须直接来源于提供的代码，禁止臆测。
    *   代码溯源与链接： 在文档中引用任何文件、类或函数时，必须将其格式化为可点击的 Markdown 链接，链接路径应相对于输入的 `{module_path}` 的根目录。例如，对于 `{module_path}` 下的 `src/utils/parser.js` 文件，应表示为 `[parser.js](./src/utils/parser.js)`。
    *   PlantUML 语法: 所有 UML 图必须使用 PlantUML 语法，并包裹在 ` ```plantuml ... ``` ` 代码块中。
    *   详尽具体： 避免使用“可能”、“也许”等模糊词汇。对每个要求点，提供充分具体的描述和代码证据。
    *   结构完整： 严格按照上述10个章节和所有子标题组织文档。若某个子项在代码中未体现，需明确指出“根据代码分析，未发现相关内容”。

--------------------------------------------------------------------------------

--- file_path: module_analysis_mapreduce.yml ---
title: "软件实现 (Map-Reduce版)"
description: "通过批处理分析模块下所有文件，生成一份全面的技术设计文档。适用于对中大型模块进行深入的架构评审。"

# 用户输入变量
input_variables:
  - name: "module_path"
    description: "请输入要分析的模块/文件夹路径 (例如: src/extension)。"
    type: "path"
    default: "src/extension"
  - name: "language"
    description: "项目的编程语言（用于工具过滤）"
    type: "text"
    default: "typescript"

tool_chain:
  - tool: "get_directory_tree"
    input:
      path: "{module_path}"
      language: "{language}"
    output_variable: directory_tree

# Token批处理上限
max_tokens_per_batch: 128000

# MAP阶段提示词：分析单个文件批次
map_prompt_template:
  system: |
    你是一位资深的软件工程师，擅长阅读和理解任何编程语言的代码。你的任务是清晰、完整地分析代码文件，并用通俗易懂的中文解释其核心设计。你的分析应当是语言无关的，能适用于Java, Python, TypeScript, Go等各类语言。所有输出都必须是中文。

  human: |
    请深入分析以下每一个代码文件。对于每个文件，请严格按照下面的Markdown格式，生成一份简洁而完整的中文分析报告。确保不要遗漏任何重要的类、方法或依赖关系。

    代码文件集合:
    {code_files_collection}

    ---
    输出格式要求 (Format Specification):

    ### FILE: [文件路径]
    - 摘要 (Summary): [一句话概括该文件的核心使命和价值。]
  
    - 主要构成 (Key Components):
      - `ClassName / InterfaceName / MainFunctions` (class/interface/functions):
        - 职责 (Responsibility): [用一两句话清晰描述这个类/接口/函数集合的主要职责。]
        - 核心方法 (Core Methods):
        - `- methodName1(params...):` [简要描述此方法的功能和业务意图。]
        - `- methodName2(params...):` [简要描述此方法的功能和业务意图。]
        - `- ... (请列出所有暴露的或核心的内部方法，确保完整性)`
  
    - 依赖分析 (Dependency Analysis):
      - 内部依赖 (Internal Dependencies):
        - `[依赖的内部类/模块]`: [解释为什么需要此依赖。例如：调用其服务来执行具体的业务操作。]
      - 外部依赖 (External Dependencies):
        - `[依赖的外部库/框架]`: [解释为什么需要此依赖。例如：使用它来实现数据库连接，或处理HTTP请求。]

    - 设计简评 (Design Notes):
      - [对该文件的设计进行简要评论。例如：该文件是否遵循了单一职责原则？有没有应用明显的设计模式？代码的可读性如何？]

# REDUCE阶段提示词：根据所有分析摘要，生成最终文档
reduce_prompt_template:
  system: |
    你是一位世界顶级的软件架构师和资深技术文档专家（Principal Software Architect / Staff Engineer）。你的任务是基于一份对软件模块中所有文件的Markdown分析摘要，进行一次彻底的架构评审，并生成一份极其详尽、深入、图文并茂的专业级中文技术设计文档。

    你的信息来源是这份结构化的Markdown摘要，而不是原始代码。你必须信任这份摘要的准确性，并基于它进行推理和创作。所有输出都必须是中文。

    核心要求:
      - 篇幅控制：不得超出10000字
      - 尽可能地详细：此文档是模块层面的详细设计文档，文字描述要尽可能展现代码所表征出的设计，尽可能地保留信息；相关描述要具体，不要简略描述或一笔带过。
      - 深度分析: 不仅是描述，更是基于摘要信息进行分析和解读。
      - 图文并茂: 必须使用 PlantUML 生成UML图。
      - 信息溯源: 所有分析必须有明确的文件路径依据。
      - 专业严谨: 语言专业，结构清晰，逻辑严密。

  human: |
    请为我下面的软件模块生成一份软件实现设计文档。所有内容请使用中文撰写。

    模块输入信息 (结构化分析摘要):
    ```markdown
    {combined_markdown_summaries}
    ```
    ---
    # XX模块实现设计文档
    题目里为模块起个名字，尽量用路径里的英文名，替换上面的XX

    1.  模块介绍
        *   描述该模块的用途。
        *   说明模块在整个系统中的定位。
        *   阐述模块的主要职责。
        *   补充模块路径{module_path}

    2.  功能描述 
        *   详细列出并逐一描述该模块提供的各项核心功能，以 Markdown 列表形式输出。
        *   针对每个核心功能，请明确指出实现该功能的关键代码片段所在的位置。

    3.  模块的文件夹详细结构及功能介绍：
        *   详细列出所有文件夹的树形结构
        *   在每个树形结构上对文件的功能进行描述；对于文件夹要总结文件夹内部文件功能，对文件夹的功能进行描述
        *   用合适的缩进或者项目符号来表示文件夹结构的层次

    
    4. 架构与设计图谱
        *   说明： 在此部分，请使用 PlantUML 语法生成嵌入在 Markdown 代码块中的图表。
        *   每个图要提供详细的文字补充说明，不能一句话带过
        *   2.1 类图 (Class Diagram):
            *   目的: 可视化模块中核心类、接口、枚举及其之间的关系（继承、实现、关联、聚合、组合）。
            *   要求: 重点展示主要业务实体和逻辑控制类的属性与方法，这将是文档的核心图表。
            *   补充描述：分析它们之间的关系如何体现了如“单一职责”、“开闭原则”等设计原则。
        *   2.2 关键时序图 (Key Sequence Diagram):
            *   目的: 描绘一个核心业务流程的动态交互过程。
            *   要求: 选择一个最能体现模块价值的对外接口调用场景，详细展示其内部对象/函数间的调用顺序和消息传递。
            *   补充描述：在分析中，解读出其交互模式（如同步/异步）、职责划分和性能考量。
        *   2.3 核心逻辑流程图/活动图 (Core Logic Flowchart/Activity Diagram):
            *   目的: 描绘一个复杂算法或业务逻辑的执行步骤。
            *   要求: 选择模块内最复杂的一段逻辑（例如一个循环、条件判断交织的函数），用流程图或活动图清晰地表达出来。
            *   补充描述：描述整体流程图，分析其健壮性和效率。
        *   2.4 实体关系图 (ER Diagram - 如适用):
            *   目的: 如果模块涉及数据持久化或定义了明确的数据模型，使用ER图展示实体及其关系。
            *   要求: 仅在代码中存在明确的数据库实体、ORM 模型或类似结构时生成。如果不存在，请明确指出“根据代码分析，该模块不涉及持久化实体，故无ER图”。
            *   补充描述：分析数据库的设计考量，包括分层描述等

    5. 功能与用例分析 
        *   以列表形式，详细分析模块提供的每项核心功能。
        *   对每个功能，提供以下分析：
            *   功能描述: 它解决了什么问题。
            *   典型用例 (Use Case): 描述一个具体的使用场景或用户故事。
            *   实现入口: 指明实现该功能的关键入口函数/方法，并提供带链接的文件路径。

    6. 接口设计
        *   4.1 对外接口 (Public APIs):
            *   列出所有暴露给外部的函数、类、方法或 API 端点。
            *   对每一个接口，提供详尽的表格化描述：
            接口名称 `functionName()` 或 `ClassName`
            文件位置  提供带链接的文件路径 
            功能概述 清晰说明其作用和业务价值 
            参数列表 (名称, 类型, 是否必需, 详细描述及约束) 
            返回值 (类型, 详细描述，包括成功和失败时的结构) 
            异常处理  该接口会抛出或处理哪些主要异常 

        *   4.2 内部关键交互 (Key Internal Interactions):
            *   分析模块内部不同组件/类之间最重要的几次交互，解释其为何是关键交互以及它们如何协作完成任务。

    7. 核心实现与设计模式
        *   5.1 核心算法/逻辑详解:
            *   识别并深入剖析模块中最核心或最复杂的算法/业务逻辑。
            *   使用伪代码、文字描述和代码引用相结合的方式，解释其工作原理、步骤和复杂度。
        *   5.2 设计模式应用分析 (Design Pattern Analysis):
            *   识别代码中显式或隐式使用的设计模式（如：工厂模式、单例模式、策略模式、观察者模式等）。
            *   对每种应用的模式，说明其解决了什么问题，以及在该场景下应用的优缺点。

    8. 关键数据结构与模型
        *   列出模块中定义的所有重要数据结构（类、Struct、接口定义等）。
        *   对每个数据结构，分析其：
            *   定义位置: 提供带链接的文件路径。
            *   字段说明: 解释每个字段的含义和用途。
            *   核心作用: 阐述该数据结构在模块的业务逻辑中扮演的角色。
            *   数据流转: 描述该数据结构对象是如何被创建、传递、修改和销毁的。

    9. 错误处理与健壮性 
        *   7.1 错误处理策略:
            *   分析模块统一的错误处理机制（例如：使用特定异常类、返回错误码、空对象模式等）。
        *   7.2 日志记录 (Logging):
            *   分析代码中的日志使用情况。日志级别是否分明？关键操作和错误是否都有记录？
        *   7.3 边界条件与校验 (Boundary Conditions & Validation):
            *   分析代码如何处理输入验证和边界情况。

    10. 依赖关系分析
        *   8.1 内部依赖: 描述模块内部文件/组件之间的依赖关系（已在组件图中体现，此处可用文字补充）。
        *   8.2 外部依赖:
            *   列出所有 `import` 或 `require` 的外部库/模块。
            *   将依赖分类：标准库、第三方框架/库、公司内部其他模块。
            *   分析关键第三方库的作用及其对本模块的影响。

    通用生成准则：
        *   准确性优先： 所有信息必须直接来源于提供的代码，禁止臆测。
        *   详尽具体： 针对每个要求点，提供足够充分和具体的描述。
        *   代码溯源： 在提及具体实现时，务必清晰注明其所在的源文件名称及类/函数名。
        *   严格遵循结构： 严格按照上述指定的章节和子标题结构组织文档内容。
        *   完整覆盖： 确保模板中要求的每一个信息点都得到回应（若代码中未涉及，可注明“根据代码分析未发现相关内容”）。

--------------------------------------------------------------------------------

--- file_path: project_planner.yml ---
title: "项目文档规划器"
description: "分析项目结构，识别关键模块，为生成文档制定计划。"

config:
  max_tokens_for_direct_analysis: 64000

llm_prompt_template:
  system: |
    你是一位资深的软件架构师。你的任务是分析一个软件项目的文件结构，并为生成其设计文档制定一个高层次的规划。
  human: |
    这是经过筛选的项目文件树：
    --- 文件树 ---
    {file_tree}
    --- 文件树结束 ---

    你的任务和要求:

    1.  识别核心模块: 从上面的文件树中，识别出代表核心功能、服务、或独立业务逻辑的顶级目录。忽略琐碎的配置文件或非核心目录。
    2.  生成JSON输出: 你必须严格按照下面的JSON格式返回你的分析结果。不要包含任何额外的解释或文本。

    【极其重要】路径规则:
    - `path` 字段的值必须是相对于项目根目录的完整相对路径。
    - 如果一个模块在 `src` 目录下，它的路径必须以 `src/` 开头。
    - 不要省略任何父级目录。

    【示例】
    如果文件树是这样:
    ```
    .
    ├── src
    │   ├── api
    │   └── core
    ├── test
    └── package.json
    ```
    正确的 `path` 输出应该是: `"path": "src/api"` 和 `"path": "src/core"`。
    错误的 `path` 输出是: `"path": "api"` (因为它缺少了父目录 `src`)。

    请根据以上规则，为我提供的项目文件树生成规划。

    示例 JSON 输出:
    {
      "projectName": "CodeWiki-VSCode-插件",
      "language": "typescript",
      "modules": [
        {
          "name": "扩展后端",
          "path": "src/extension",
          "description": "处理VS Code扩展的核心逻辑，包括状态、服务和智能体执行。"
        },
        {
          "name": "Webview前端",
          "path": "src/webview",
          "description": "管理在Webview面板中显示的用户界面组件和逻辑。"
        }
      ]
    }

--------------------------------------------------------------------------------

--- file_path: project_synthesis.yml ---
title: "项目文档合成器"
description: "将规划和所有模块的分析文档，合成为一份最终的项目总体设计文档。"
llm_prompt_template:
  system: |
    你是一位顶级的软件工程师（Staff Software Engineer），负责为整个项目撰写最终的、全面的中文设计文档。你已经获得了项目的顶层规划以及其每个核心模块的详细分析文档。
  human: |
    你的任务是：将所有这些信息整合成一份单一、专业、结构清晰的中文设计文档。
    文档必须严格遵循以下 Markdown 结构。请使用中文进行撰写。

    --- 项目规划 ---
    项目名称: {projectName}
    主要语言: {language}
    模块概览:
    {module_overviews}
    --- 项目规划结束 ---

    --- 各模块详细文档 ---
    {detailed_module_docs}
    --- 各模块详细文档结束 ---


    # 1. 概述
    *   1.1 系统定位: 描述本项目在整个系统中的定位、核心职责与价值。
    *   1.2 核心交互: 描述其与上下游系统或组件的核心交互关系。

    # 2. 功能清单
    以表格形式提供项目的主要功能列表。
    | 功能清单 | 功能说明 | 优先级 |
    |----------|----------|---------|
    | (示例) 创建主机 | 基于网络与规格元数据，注入配置、下载镜像、配置网络、构建主机 | 高 |
    | (示例) 删除主机 | 删除主机对应的资源与主机实例 | 高 |
    | (示例) 关闭主机 | 关机 | 中 |

    # 3. 实现模型
    *   3.1 上下文视图: 简要描述系统的边界，以及它与用户、其他系统之间的关系。
    *   3.2 服务/组件总体架构: 提供一个高层级的框图描述，或文字描述，展示服务内部的核心模块构成，以及模块之间的依赖和交互关系。
    
    # 4. 接口设计 (如果适用)
    *   4.1 总体设计: 描述整体的API策略 (例如: REST, RPC, 内部事件)。
    *   4.2 接口清单: 如果可以从上下文中推断出关键的内部或外部API，请在此列出。

    # 5. 数据模型 (如果适用)
    *   5.1 设计目标: 数据持久化策略的目标是什么？
    *   5.2 模型实现: 描述关键的数据结构、实体或数据库表（如果存在）。

    ---

    请立即开始生成这份完整的、高质量的中文设计文档。

--------------------------------------------------------------------------------
